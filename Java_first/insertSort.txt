public class test {
    public static void main(String[] args) {
        // 演示选择排序
        System.out.println("=== 选择排序演示 ===");
        int[] arr1 = {64, 25, 12, 22, 11};
        System.out.println("排序前的数组:");
        printArray(arr1);
        selectionSort(arr1);
        System.out.println("选择排序后的数组:");
        printArray(arr1);
        
        System.out.println();
        
        // 演示插入排序
        System.out.println("=== 插入排序演示 ===");
        int[] arr2 = {64, 25, 12, 22, 11};
        System.out.println("排序前的数组:");
        printArray(arr2);
        insertionSort(arr2);
        System.out.println("插入排序后的数组:");
        printArray(arr2);
    }
    
    // 选择排序算法实现
    public static void selectionSort(int[] arr) {
        int n = arr.length;
        
        // 外层循环：遍历数组的每个位置
        for (int i = 0; i < n - 1; i++) {
            // 假设当前位置是最小值的索引
            int minIndex = i;
            
            // 内层循环：在剩余未排序的元素中找到最小值
            for (int j = i + 1; j < n; j++) {
                if (arr[j] < arr[minIndex]) {
                    minIndex = j;
                }
            }
            
            // 如果找到更小的元素，则交换位置
            if (minIndex != i) {
                int temp = arr[i];
                arr[i] = arr[minIndex];
                arr[minIndex] = temp;
            }
        }
    }
    
    // 插入排序算法实现
    public static void insertionSort(int[] arr) {
        int n = arr.length;
        
        // 从第二个元素开始遍历（索引1开始）
        for (int i = 1; i < n; i++) {
            // 保存当前要插入的元素
            int key = arr[i];
            int j = i - 1;
            
            // 将比key大的元素向后移动一位
            while (j >= 0 && arr[j] > key) {
                arr[j + 1] = arr[j];
                j = j - 1;
            }
            
            // 将key插入到正确的位置
            arr[j + 1] = key;
        }
    }
    
    // 打印数组的辅助方法
    public static void printArray(int[] arr) {
        for (int i = 0; i < arr.length; i++) {
            System.out.print(arr[i] + " ");
        }
        System.out.println();
    }
}
