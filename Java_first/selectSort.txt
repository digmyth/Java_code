基本思想：在每一轮排序中，我们从未排序区域找出最小的元素，将它放到未排序区域的最前面。通过不断重复这个过程，整个数组最终会变成有序的。

选择排序的重要特点

对于n个数据的排序，我们只需要执行n-1轮，因为每轮都能确定一个元素的最终位置。
需要通过一个变量(p)来记录未排序区域中最小值的索引。
每一轮排序只需要执行一次交换操作。

public class test {
    public static void main(String[] args) {
        // 创建一个示例数组
        int[] arr = {64, 25, 12, 22, 11};
        
        System.out.println("排序前的数组:");
        printArray(arr);
        
        // 执行选择排序
        selectionSort(arr);
        
        System.out.println("排序后的数组:");
        printArray(arr);
    }
    
    // 选择排序算法实现
    public static void selectionSort(int[] arr) {
        int n = arr.length;
        
        // 外层循环：遍历数组的每个位置
        for (int i = 0; i < n - 1; i++) {
            // 假设当前位置是最小值的索引
            int p = i;
            
            // 内层循环：在剩余未排序的元素中找到最小值
            for (int j = i + 1; j < n; j++) {
                if (arr[j] < arr[p]) {
                    p = j;
                }
            }
            
            // 如果找到更小的元素，则交换位置
            if (p != i) {
                int temp = arr[i];
                arr[i] = arr[minIndex];
                arr[p] = temp;
            }
        }
    }
    
    // 打印数组的辅助方法
    public static void printArray(int[] arr) {
        for (int i = 0; i < arr.length; i++) {
            System.out.print(arr[i] + " ");
        }
        System.out.println();
    }
}
